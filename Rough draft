# Team 2531 RoboHawks 2023 Robot - code contribution standards & procedures.

## overview:
Developers are welcome to add to the team 2531 robotics code whether they are part of the programming team or not. The process for doing this applies equally to the programming team as well as non-members as follows:

## Requirements:
- Before beginning a new project, the contributor MUST discuss their plans with the programming team (at least 1 lead/mentor and 3 members present). 
- All work must be based upon our current GitHub repo located at https://github.com/2531RoboHawks/2023RobotCode.
- All work must be done on a BRANCH other than main.
- All 2531 team members must follow the team's contribution procedures and meet the team's programming standards.  (Both outlined below.)


## Standards:
- Code must be clearly commented.
  - Contributed code must have a header block including:
      - general overview in each working file (summary).
      - Commit history must be appropriate.
  - Previously existing code is NOT excused from the above requirement.  (*If you change a module, COMMENT IT!)
  - Comments for each logical block of code are required.  
      - These comments should explain what that logical block does, default values, values designated for practice, competition, etc. 
  - Any code that uses UNUSUAL structures or approaches must be clearly explained.
  - It is recommended that developers follow the literate programming approach: https://csli.sites.stanford.edu/publications/coding-languages/literate-programming.
- Comments should adhere to the 9 principles outlined in this article: https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/
  1. Comments should not duplicate the code.
  2. Good comments do not excuse unclear code.
  3. If you canâ€™t write a clear comment, there may be a problem with the code.
  4. Comments should dispel confusion, not cause it.
  5. Explain UNUSUAL or NONSTANDARD code in comments.
  6. Provide LINKS to the original source of copied code (if any).
  7. Include LINKS to external references where they will be most helpful (if any).
  8. Add comments when fixing bugs.
  9. Use comments to mark incomplete implementations and/or anything that's need to be done (if any).


## Before merging code into main:
- New projects:
    - Before you begin, the idea must be introduced with a full plan to the programming team (at least 1 lead/mentor and 3 members present) to the point that the entire team understands everything being proposed.
        - The point of this discussion is to coordinate with the team and avoid any duplication of effort as well as to determine the need for the new project.
    - After the project is completed, the review must be hosted in person (at least 1 lead/mentor and 3 members present).
        - The programming team may offer suggestions to be implemented.
        - Create pull request.
           - Virtual review: member may put comments and concerns on the pull request on their own time.
        - Code must be tested on one of the physical robots by loading that branch up to the robot (at least 1 lead/mentor and 3 members present).
           - Code must work as advertised.
           - Code must not interfere with any other functionality of other codes.
        - When no problems are introduced, code may merge into main (at least 1 lead/mentor and 3 members present).
    
- Changes/Debugging from main branch:
    - Create pull request
    - Virtual review: Anyone may review and comment code on pull request on their own time.
    - Changes must work as advertised.
    - Changes must not interfere with any other functionality of the code.
    - When all introduced problems are resolved, code may merge into main.
    - Changes must be tested on one of the physical robots by loading that branch up to the robot.
    
- IMPORTANT!!! If bad codes are detected in main...Notify the programming group immediately! One of the following may be done:
    1. Revert code to a previous commit from main.
    2. Fix problem, create pull request, host a quick review, and merge into main.

