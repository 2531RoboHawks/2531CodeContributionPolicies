## Standards:
- Code must be clearly commented.
  - Contributed code must have a header block including:
      - general overview in each working file (summary).
      - Commit history must be appropriate.
      - Previously existing code is NOT excused from the above requirement.  (*If you change a module, COMMENT IT!)
  - Comments for each logical block of code are required.  
      - These comments should explain what that logical block does, default values, values designated for practice, competition, etc. 
  - Any code that uses UNUSUAL structures or approaches must be clearly explained.
  - It is recommended that developers follow the literate programming approach: https://csli.sites.stanford.edu/publications/coding-languages/literate-programming.
- Comments should adhere to the 9 principles outlined in this article: https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/
  1. Comments should not duplicate the code.
  2. Good comments do not excuse unclear code.
  3. If you canâ€™t write a clear comment, there may be a problem with the code.
  4. Comments should dispel confusion, not cause it.
  5. Explain UNUSUAL or NONSTANDARD code in comments.
  6. Provide LINKS to the original source of copied code (if any).
  7. Include LINKS to external references where they will be most helpful (if any).
  8. Add comments when fixing bugs.
  9. Use comments to mark incomplete implementations and/or anything that's need to be done (if any).
      - For example:
        // TODO: Add a spin flourish to the end of the autonomous routine.


## Before merging code into main:
- New projects:
    - Before you begin, the idea must be introduced with a full plan to the programming team (at least 1 lead and 2 members present) to the point that everyone understands everything being proposed.
        - The point of this discussion is to coordinate with the team and avoid any duplication of effort as well as to determine the need for the new project.
        - Once a lead approve, they may begin to work on the project.
    - After the project is completed, the review must be hosted in person (at least 1 lead and 2 members present).
        - The programming team may offer suggestions to be implemented.
        - Create pull request.
           - Virtual review: member may put comments and concerns on the pull request on their own time.
        - Code must be tested on the physical robot by deploying to the robot (at least 1 lead and 2 members present AND/OR record a video and post on Slack).
           - Code must work as advertised.
           - Code must not interfere with any other functionality of other codes.
        - When all introduced problems are resolved, code may merge into main.
           - needs the approval of at least 1 lead and 2 members.
    
- Changes/Debugging from main branch:
    - Create pull request
        - Virtual review: Anyone may review and comment code on pull request on their own time.
        - Optional in-person reviews UNLESS the situation requires otherwise.
    - Changes must work as advertised.
    - Changes must not interfere with any other functionality of the code.
    - Changes must be tested on the physical robot by deploying to the robot (# of members present not definite).
        - Must work and not introduce new problems.
    - When all introduced problems are resolved, code may merge into main.
        - needs the approval of at least 1 lead and 2 members.
        
- During Competition:
    - In a separate branch called "Comp", "RobotContainer.java" will be changing periodically for each match.
        - Code may be deployed on robot for competition without a code review.
        - Code may merge into main after a code review.
   
- IMPORTANT!!! 
    - If bad codes are detected in main in the SHOP...
        - Notify the programming group via Slack.
        - Fix problem and follow the procedures stated above.
    - If bad codes are detected in main during COMPETITION...
        - Notify the programming group via Slack immediately! One of the following may be done:
            - Revert code to a previous commit from main.
            - Fix problem, create pull request, host a quick review, and merge into main.
        - If there's no time to properly follows the procedures before the next match:
            - With the approval of at least 1 (other) lead/mentor and 2 members: Fix problem, deploy code for the next match without a proper review.
            - If not approved, revert code to a previous commit from main and deploy code.
